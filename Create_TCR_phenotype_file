
load("/well/todd/users/xnc303/bpf/2.mixcr/batch2/bigmat_one_C1.Rd")
bigmat->bigmat_b2
colnames(bigmat_b2)[1]<-"sample_id"
load("/well/todd/users/xnc303/bpf/2.mixcr/C1/redo/bigmat_one.Rd")
colnames(bigmat)[1]<-"sample_id"
rbind(bigmat,bigmat_b2)->bmall
bmall->bigmat


library(limma)
library(edgeR)

inormal <- function(x) qnorm((rank(x, na.last = "keep") - 0.5) / sum(!is.na(x)))
#### get prod and b
bigmat[which(bigmat$chains=="TRB"),]->bigmatb
bigmatb[!grepl("_",bigmatb$aaSeqCDR3),]->bm
unique(bm$id)->tn
read.table("/well/todd/users/xnc303/bpf/For_Ben/redo_6aug/merged_keep_28aug_C1.fam")->fam2

fam2$V2->tmp
sapply(strsplit(tmp,"_"),"[[",1)->id
matrix(0,nrow=nrow(fam2),ncol=length(tn))->phen

sapply(strsplit(bm$id," "),"[[",1)->trbv
sapply(strsplit(bm[,1],"_"),"[[",1)->bm[,1]
cbind(trbv,bm)->bmt
unique(trbv)->uvb

######## MAKE A MATRIX TO NORMALISE HERE
matrix(0,nrow=length(id),ncol=length(uvb))->phen
for(i in 1:length(uvb)){
###for(i in 1:10){
bmt[which(bmt[,1]==uvb[i]),]->y
for(j in 1:nrow(fam2)){
y[which(y[,2]==id[j]),]->y2
length(which(y2$cloneCount>0))->phen[j,i]}
print(i)}
colnames(phen)<-uvb
rownames(phen)<-fam2[,2]


#### get only > 70%

vec0<-vector()
for(i in 1:ncol(phen)){
length(which(phen[,i]==0))->vec0[i]}
phen[,which(vec0<(0.3*(nrow(phen))))]->phen2

read.csv("/well/todd/users/xnc303/bpf/metadata/fullMetadata2.csv")->fm
read.table("/well/todd/users/xnc303/bpf/For_Ben/redo_6aug/merged_keep_28aug_C1.fam")->fam
sapply(strsplit(fam[,2],"_"),"[[",1)->id
fm[match(id,fm[,1]),]->fmm

read.csv("/well/todd/users/xnc303/bpf/metadata/batchSequencing_HDC1C2.csv")->batch
batch[grep("C1",batch[,1]),]->batchC1
batchC1->batchC1new
for(i in 1:nrow(batchC1)){
LETTERS[batchC1$batch[i]]->batchC1new$batch[i]}
sapply(strsplit(batchC1new[,1],"_"),"[[",1)->tmp
batchC1new[match(id,tmp),"batch"]->bm

#### assign the new ids to new batch

sapply(strsplit(bigmat_b2[,1],"_"),"[[",1)->b2id
unique(b2id)->ub2id
bm[which(is.na(match(id,ub2id))==F)]<-"N"
bm[which(is.na(bm)==T)]<-"P"

#### correct any NA left after that
#### then match up the covariates that are missing

t(phen2)->tphen
y <- DGEList(counts=tphen)
y <- calcNormFactors(y, method = "TMM")
tmm_result <- cpm(y)
removeBatchEffect(as.matrix(tmm_result),bm)->tmm_result_batch

t(tmm_result_batch)->tmm_result_t
inormal <- function(x) qnorm((rank(x, na.last = "keep") - 0.5) / sum(!is.na(x)))
apply(tmm_result_t,2,inormal) -> tmm_norm

cbind(fam2[,1:2],tmm_norm)->clone1_b_inrt

colnames(clone1_b_inrt)[1:2]<-c("FID","IID")
write.table(clone1_b_inrt,file="c1b_inrt_250_tmm",col.names=T,row.names=F,quote=F,sep="\t")

read.table("c1b_inrt_250_tmm",header=T)->clone1_b_inrt
clone1_b_inrt[,3:ncol(clone1_b_inrt)]->y
prcomp(y,scale=T,center=T)->res
write.table(res$x[,1:3],file="res3_250_beta_tmm.txt",quote=F,col.names=F,row.names=F)


myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))

#### check batch against PC
bm->batch
data.frame(fmm,batch)->meta2
library(ggfortify)
pdf("pca_batch_250.pdf")
autoplot(res,data = meta2,colour = 'batch')+theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
dev.off()

read.csv("extraSamplesEsther.csv",header=T)->x
read.csv("/well/todd/users/xnc303/bpf/metadata/fullMetadata2.csv")->fm
read.table("/well/todd/users/xnc303/bpf/For_Ben/redo_6aug/merged_keep_28aug_C1.fam")->fam
sapply(strsplit(fam[,2],"_"),"[[",1)->id
fm[match(id,fm[,1]),]->meta2

as.matrix(meta2)->meta2
which(is.na(meta2[,"age"])==T)->idx
for(i in 1:length(idx)){
match(id[idx[i]],id)->temp
x[match(id[idx[i]],x[,1]),"age"]->meta2[temp,"age"]
}

as.matrix(meta2)->meta2
which(is.na(meta2[,"cancer"])==T)->idx
for(i in 1:length(idx)){
match(id[idx[i]],id)->temp
x[match(id[idx[i]],x[,1]),"cancer"]->meta2[temp,"cancer"]
}
meta2["265","cancer"]<-"Melanoma"

sexvec<-vector()
sexvec[which(x$sex==2)]<-"F"
sexvec[which(x$sex==1)]<-"M"

as.matrix(meta2)->meta2
which(is.na(meta2[,"sex"])==T)->idx
for(i in 1:length(idx)){
match(id[idx[i]],id)->temp
sexvec[match(id[idx[i]],x[,1])]->meta2[temp,"sex"]
}

data.frame(meta2[,"age"],meta2[,"sex"],meta2[,"cancer"])->tmp
read.table("/well/todd/users/xnc303/bpf/2.mixcr/batch2/res3_250_beta_tmm.txt",header=F)->res
read.table("/well/todd/users/xnc303/bpf/For_Ben/redo_6aug/merged_keep_28aug_C1.eigenvec",header=F)->ei
data.frame(ei[,1:4],res[,1:2],tmp)->cov
write.table(cov,file="cov_250_beta_tmm",sep="\t",col.names=F,row.names=F,quote=F)
